{"ast":null,"code":"var _jsxFileName = \"/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useCallback } from 'react';\nimport './map.scss';\nimport { GoogleMap, Marker, useLoadScript, DirectionsRenderer, DirectionsService } from '@react-google-maps/api';\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  Width: '100wh',\n  height: '100vh'\n};\n\nconst Map = () => {\n  _s();\n\n  const [myMap, setMyMap] = useState(null);\n  const [center, setCenter] = useState({\n    lat: 55.7522200,\n    lng: 37.6155600\n  });\n  const [zoom, setZoom] = useState(10);\n  const [markers, setMarkers] = useState([]);\n  const [coordinates, setCoordinates] = useState(null);\n  const [response, setResponse] = useState(null);\n  const [travelMode, setTravelMode] = React.useState('DRIVING');\n  const [origin, setOrigin] = React.useState('');\n  const [destination, setDestination] = React.useState('');\n  const originRef = React.useRef();\n  const destinationRef = React.useRef();\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\"\n  });\n  const onMapClick = useCallback(event => {\n    setCoordinates(coordinates => event.latLng.toJSON());\n    setMarkers(markers => markers);\n    setOrigin(originRef.current.value);\n    setDestination(destinationRef.current.value);\n  }, []);\n  const directionsServiceOptions = {\n    origin: coordinates,\n    destination: center,\n    travelMode: travelMode\n  };\n  console.log(directionsServiceOptions);\n  const directionsCallback = useCallback(res => {\n    console.log(res);\n\n    if (res !== null) {\n      if (res.status === 'OK') {\n        setResponse(res);\n      } else {\n        console.log('response: ', res);\n      }\n    }\n  }, []);\n\n  const directionsRendererOptions = () => {\n    return {\n      directions: response\n    };\n  };\n\n  const renderMap = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: containerStyle,\n      onLoad: map => setMyMap(map),\n      onClick: onMapClick,\n      children: [/*#__PURE__*/_jsxDEV(PolygonMkad, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), markers ? /*#__PURE__*/_jsxDEV(Marker, {\n        position: coordinates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 28\n      }, this) : null, directionsServiceOptions.destination !== null && directionsServiceOptions.origin !== null && /*#__PURE__*/_jsxDEV(DirectionsService, {\n        options: directionsServiceOptions,\n        callback: directionsCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), response !== null && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        options: directionsRendererOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n\n  return isLoaded ? renderMap() : null;\n};\n\n_s(Map, \"WCYQJvv/VVeQISsaiue0SoW0t/Q=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\nexport default _c2 = /*#__PURE__*/React.memo(Map);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx"],"names":["React","useState","useCallback","GoogleMap","Marker","useLoadScript","DirectionsRenderer","DirectionsService","PolygonMkad","containerStyle","Width","height","Map","myMap","setMyMap","center","setCenter","lat","lng","zoom","setZoom","markers","setMarkers","coordinates","setCoordinates","response","setResponse","travelMode","setTravelMode","origin","setOrigin","destination","setDestination","originRef","useRef","destinationRef","isLoaded","googleMapsApiKey","onMapClick","event","latLng","toJSON","current","value","directionsServiceOptions","console","log","directionsCallback","res","status","directionsRendererOptions","directions","renderMap","map","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {useState, useCallback} from 'react'\n\nimport './map.scss'\n\nimport {GoogleMap, Marker, useLoadScript, DirectionsRenderer, DirectionsService} from '@react-google-maps/api';\n\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\n\n\nconst containerStyle = {\n    Width: '100wh',\n    height: '100vh'\n}\n\n\nconst  Map = () => {\n\n    const [ myMap, setMyMap ] = useState(null);\n    const [center, setCenter] = useState({lat: 55.7522200, lng: 37.6155600});\n    const [zoom,setZoom] = useState(10);\n    const [ markers, setMarkers ] = useState([]);\n    const [coordinates, setCoordinates] = useState(null)\n    const [response, setResponse] = useState(null)\n    const [travelMode, setTravelMode] = React.useState('DRIVING')\n    const [origin, setOrigin] = React.useState('')\n    const [destination, setDestination] = React.useState('')\n\n    const originRef = React.useRef()\n    const destinationRef = React.useRef()\n\n    const { isLoaded } = useLoadScript({\n        googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\",\n    });\n\n    const onMapClick = useCallback((event) => {\n            setCoordinates(coordinates => event.latLng.toJSON());\n            setMarkers(markers => markers);\n            setOrigin(originRef.current.value);\n            setDestination(destinationRef.current.value);\n    }, [])\n\n    const directionsServiceOptions = {\n            origin: coordinates,\n            destination: center,\n            travelMode: travelMode\n        }\n\n\n    console.log(directionsServiceOptions)\n\n    const directionsCallback = useCallback((res) => {\n        console.log(res)\n        if (res !== null) {\n            if (res.status === 'OK') {\n                setResponse(res)\n            } else {\n                console.log('response: ', res)\n            }\n        }\n    }, [])\n\n    const directionsRendererOptions = (() => {\n        return {\n            directions: response,\n        }\n    })\n\n\n\n\n    const renderMap = () => (\n        <div>\n            <GoogleMap\n                center={center}\n                zoom={zoom}\n                mapContainerStyle={containerStyle}\n                onLoad={map => setMyMap(map)}\n                onClick={onMapClick}\n            >\n                <PolygonMkad/>\n               {markers ? (<Marker position={coordinates}/>) : null}\n\n                {directionsServiceOptions.destination !== null && directionsServiceOptions.origin !== null && (\n                    <DirectionsService\n                        options={directionsServiceOptions}\n                        callback={directionsCallback}\n                    />\n                )}\n                {response !== null && (\n                    <DirectionsRenderer options={directionsRendererOptions} />\n                )}\n\n            </GoogleMap>\n        </div>\n)\n\n    return isLoaded ? renderMap() : null;\n\n}\n\n\n\nexport default React.memo(Map)\n\n\n"]},"metadata":{},"sourceType":"module"}