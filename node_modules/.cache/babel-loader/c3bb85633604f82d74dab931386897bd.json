{"ast":null,"code":"var _jsxFileName = \"/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useCallback } from 'react';\nimport paths from \"../../mkad\";\nimport './map.scss';\nimport { GoogleMap, Marker, useLoadScript, DirectionsRenderer, DirectionsService, Polyline, InfoWindow, DistanceMatrixService } from '@react-google-maps/api';\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100wh',\n  height: '100vh'\n};\n\nconst Map = () => {\n  _s();\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\"\n  });\n  const [myMap, setMyMap] = useState(null);\n  const [center, setCenter] = useState({\n    lat: 55.7522200,\n    lng: 37.6155600\n  });\n  const [zoom, setZoom] = useState(8);\n  const [markers, setMarkers] = useState([]);\n  const [coordinates, setCoordinates] = useState(null);\n  const [response, setResponse] = useState(null);\n  const [travelMode, setTravelMode] = useState('DRIVING');\n  const [origin, setOrigin] = useState('');\n  const [destination, setDestination] = useState(null);\n  const optionsPolyline = {\n    strokeColor: 'green',\n    strokeOpacity: 1,\n    strokeWeight: 5,\n    fillColor: 'green',\n    fillOpacity: 1,\n    visible: true\n  };\n  const onMapClick = useCallback(event => {\n    setCoordinates(() => event.latLng.toJSON());\n\n    if (origin !== '') {\n      setOrigin(() => event.latLng.toJSON());\n    } // setDestination(() => resultCoordinates)\n\n  }, []); // const  distance =  (lat2, lng2) =>  {\n  //     if (coordinates !== null) {\n  //         const lat1 = coordinates.lat\n  //         const lng1 = coordinates.lng\n  //\n  //         if ((lat1 === lat2) && (lng1 === lng2)) {\n  //             return 0;\n  //         }\n  //         else {\n  //             let radlat1 = Math.PI * lat1/180;\n  //             let radlat2 = Math.PI * lat2/180;\n  //             let theta = lng1-lng2;\n  //             let radtheta = Math.PI * theta/180;\n  //\n  //             let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n  //             if (dist > 1) {\n  //                 dist = 1;\n  //             }\n  //             dist = Math.acos(dist);\n  //             dist = dist * 180/Math.PI;\n  //             dist = dist * 60 * 1.1515 *1.609344\n  //\n  //             return dist;\n  //         }\n  //     }\n  // }\n  // const resultDistance = paths.map(item => distance(item.lat, item.lng))\n  // const resultSort = resultDistance.slice(0).sort((a, b) => a - b )\n  // const resultIndex = resultDistance.indexOf(resultSort[0])\n  //\n  // const resultCoordinates = paths[resultIndex]\n\n  const path = [coordinates, destination];\n  const directionsServiceOptions = {\n    origin: coordinates,\n    destination: destination,\n    travelMode: travelMode\n  };\n  const distanceMatrixServiceOptions = {\n    destinations: path,\n    origins: coordinates\n  };\n  const directionsCallback = useCallback(res => {\n    if (res !== null) {\n      if (res.status === 'OK') {\n        setResponse(res);\n      } else {\n        console.log('response: ', res);\n      }\n    }\n  }, []);\n\n  const renderMap = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: containerStyle,\n      onLoad: map => setMyMap(map),\n      onClick: onMapClick,\n      children: [/*#__PURE__*/_jsxDEV(PolygonMkad, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), markers ? /*#__PURE__*/_jsxDEV(Marker, {\n        position: coordinates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 28\n      }, this) : null, /*#__PURE__*/_jsxDEV(DirectionsService, {\n        options: directionsServiceOptions,\n        callback: directionsCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this), response !== '' ? /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        directions: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this) : null, response ? /*#__PURE__*/_jsxDEV(Polyline, {\n        options: optionsPolyline,\n        path: path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 35\n      }, this) : null, coordinates !== null && response ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: 55.7522200,\n          lng: 37.6155600\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: response.routes[0].legs[0].start_address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 57\n      }, this) : null, coordinates !== null ? /*#__PURE__*/_jsxDEV(DistanceMatrixService, {\n        options: distanceMatrixServiceOptions,\n        callback: response => {\n          console.log(response);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 47\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n\n  return isLoaded ? renderMap() : null;\n};\n\n_s(Map, \"IMPe/f6J/FcnL0zohDhGQ4H8/oQ=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\nexport default _c2 = /*#__PURE__*/React.memo(Map);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx"],"names":["React","useState","useCallback","paths","GoogleMap","Marker","useLoadScript","DirectionsRenderer","DirectionsService","Polyline","InfoWindow","DistanceMatrixService","PolygonMkad","containerStyle","width","height","Map","isLoaded","googleMapsApiKey","myMap","setMyMap","center","setCenter","lat","lng","zoom","setZoom","markers","setMarkers","coordinates","setCoordinates","response","setResponse","travelMode","setTravelMode","origin","setOrigin","destination","setDestination","optionsPolyline","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","visible","onMapClick","event","latLng","toJSON","path","directionsServiceOptions","distanceMatrixServiceOptions","destinations","origins","directionsCallback","res","status","console","log","renderMap","map","routes","legs","start_address","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {useState, useCallback} from 'react'\n\nimport paths from \"../../mkad\";\nimport './map.scss'\n\nimport\n    {GoogleMap,\n    Marker,\n    useLoadScript,\n    DirectionsRenderer,\n    DirectionsService,\n    Polyline,\n    InfoWindow,\n    DistanceMatrixService}\nfrom '@react-google-maps/api';\n\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\n\n\n\nconst containerStyle = {\n    width: '100wh',\n    height: '100vh'\n}\n\n\nconst  Map = () => {\n\n    const { isLoaded } = useLoadScript({\n        googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\",\n    });\n\n    const [ myMap, setMyMap ] = useState(null);\n    const [center, setCenter] = useState({lat: 55.7522200, lng: 37.6155600});\n    const [zoom,setZoom] = useState(8);\n    const [ markers, setMarkers ] = useState([]);\n    const [coordinates, setCoordinates] = useState(null)\n    const [response, setResponse] = useState(null)\n    const [travelMode, setTravelMode] = useState('DRIVING')\n    const [origin, setOrigin] = useState('')\n    const [destination, setDestination] = useState(null)\n\n    const optionsPolyline = {\n        strokeColor: 'green',\n        strokeOpacity: 1,\n        strokeWeight: 5,\n        fillColor: 'green',\n        fillOpacity: 1,\n        visible: true,\n    }\n\n\n\n\n    const onMapClick =  useCallback((event) => {\n            setCoordinates(() => event.latLng.toJSON());\n            if (origin !== '' ) {\n                setOrigin(() => event.latLng.toJSON())\n            }\n\n                // setDestination(() => resultCoordinates)\n\n\n            }, [])\n\n\n    // const  distance =  (lat2, lng2) =>  {\n    //     if (coordinates !== null) {\n    //         const lat1 = coordinates.lat\n    //         const lng1 = coordinates.lng\n    //\n    //         if ((lat1 === lat2) && (lng1 === lng2)) {\n    //             return 0;\n    //         }\n    //         else {\n    //             let radlat1 = Math.PI * lat1/180;\n    //             let radlat2 = Math.PI * lat2/180;\n    //             let theta = lng1-lng2;\n    //             let radtheta = Math.PI * theta/180;\n    //\n    //             let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    //             if (dist > 1) {\n    //                 dist = 1;\n    //             }\n    //             dist = Math.acos(dist);\n    //             dist = dist * 180/Math.PI;\n    //             dist = dist * 60 * 1.1515 *1.609344\n    //\n    //             return dist;\n    //         }\n    //     }\n    // }\n\n\n    // const resultDistance = paths.map(item => distance(item.lat, item.lng))\n    // const resultSort = resultDistance.slice(0).sort((a, b) => a - b )\n    // const resultIndex = resultDistance.indexOf(resultSort[0])\n    //\n    // const resultCoordinates = paths[resultIndex]\n\n    const path = [coordinates,destination]\n\n    const directionsServiceOptions = {\n        origin: coordinates,\n        destination: destination,\n        travelMode: travelMode,\n    }\n\n\n\n\n    const distanceMatrixServiceOptions = {\n        destinations: path,\n        origins: coordinates,\n    }\n\n    const directionsCallback = useCallback((res) => {\n        if (res !== null) {\n            if (res.status === 'OK') {\n                setResponse(res)\n            } else {\n                console.log('response: ', res)\n            }\n        }\n    }, [])\n\n\n    const renderMap = () => (\n        <div>\n            <GoogleMap\n                center={center}\n                zoom={zoom}\n                mapContainerStyle={containerStyle}\n                onLoad={map => setMyMap(map)}\n                onClick={onMapClick}\n            >\n                <PolygonMkad/>\n               {markers ? (<Marker position={coordinates}/>) : null}\n                    <DirectionsService\n                        options={directionsServiceOptions}\n                        callback={directionsCallback}\n                    />\n                {(response !== '') ? (\n                    <DirectionsRenderer directions ={response} />\n                ): null}\n\n                {response ? (     <Polyline\n                        options = {optionsPolyline}\n                        path = {path}\n                    />\n                ): null}\n\n                {(coordinates !== null  && response) ? (<InfoWindow\n                    position = {{lat: 55.7522200, lng: 37.6155600}}\n                    >\n\n                    <div>{response.routes[0].legs[0].start_address}</div>\n                    </InfoWindow>): null}\n\n                {coordinates !== null ? (     <DistanceMatrixService\n                    options={distanceMatrixServiceOptions}\n                    callback = {(response) => {console.log(response)}}\n                />) : null}\n\n\n            </GoogleMap>\n\n\n        </div>\n)\n\n    return isLoaded ? renderMap() : null;\n\n}\n\n\n\nexport default React.memo(Map)\n\n\n"]},"metadata":{},"sourceType":"module"}