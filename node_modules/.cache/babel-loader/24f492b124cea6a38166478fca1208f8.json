{"ast":null,"code":"var _jsxFileName = \"/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useCallback, useEffect, useRef } from 'react';\nimport paths from \"../../mkad\";\nimport { GoogleMap, Marker, useLoadScript, DirectionsRenderer, DirectionsService, Polyline, InfoWindow } from '@react-google-maps/api';\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100wh',\n  height: '100vh'\n};\n\nconst Map = () => {\n  _s();\n\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\"\n  });\n  const [myMap, setMyMap] = useState(null);\n  const [center, setCenter] = useState({\n    lat: 55.7522200,\n    lng: 37.6155600\n  });\n  const [zoom, setZoom] = useState(8);\n  const [markers, setMarkers] = useState([]);\n  const [coordinates, setCoordinates] = useState('');\n  const [response, setResponse] = useState(null);\n  const [travelMode, setTravelMode] = useState('DRIVING');\n  const [origin, setOrigin] = useState('');\n  const [destination, setDestination] = useState('');\n  const optionsPolyline = {\n    strokeColor: 'green',\n    strokeOpacity: 1,\n    strokeWeight: 5,\n    fillColor: 'green',\n    fillOpacity: 1,\n    visible: true\n  };\n  const onMapClick = useCallback(event => {\n    setCoordinates(event.latLng.toJSON());\n    setOrigin(event.latLng.toJSON());\n  }, []);\n\n  const distance = (lat1, lng1, lat2, lng2) => {\n    if (lat1 === lat2 && lng1 === lng2) {\n      return 0;\n    } else {\n      let radlat1 = Math.PI * lat1 / 180;\n      let radlat2 = Math.PI * lat2 / 180;\n      let theta = lng1 - lng2;\n      let radtheta = Math.PI * theta / 180;\n      let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n      if (dist > 1) {\n        dist = 1;\n      }\n\n      dist = Math.acos(dist);\n      dist = dist * 180 / Math.PI;\n      dist = dist * 60 * 1.1515 * 1.609344;\n      return dist;\n    }\n  };\n\n  const resultCoordinates = () => {\n    const resultDistance = paths.map(item => coordinates ? distance(coordinates.lat, coordinates.lng, item.lat, item.lng) : false);\n    const resultSort = resultDistance.slice(0).sort((a, b) => a - b);\n    const resultIndex = resultDistance.indexOf(resultSort[0]);\n    return paths[resultIndex];\n  };\n\n  useEffect(() => {\n    setDestination(resultCoordinates());\n  });\n  const path = [origin, destination];\n  const directionsServiceOptions = {\n    origin: origin,\n    destination: destination,\n    travelMode: travelMode\n  };\n  const directionsCallback = useCallback(res => {\n    if (res !== null) {\n      if (res.status === 'OK') {\n        setResponse(res);\n      } else {\n        console.log('response: ', res);\n      }\n    }\n  }, []);\n\n  const renderMap = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: containerStyle,\n      onLoad: map => setMyMap(map),\n      onClick: onMapClick,\n      children: [/*#__PURE__*/_jsxDEV(PolygonMkad, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), markers && coordinates ? /*#__PURE__*/_jsxDEV(Marker, {\n        position: coordinates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 43\n      }, this) : null, origin !== '' && destination !== '' ? /*#__PURE__*/_jsxDEV(DirectionsService, {\n        options: directionsServiceOptions,\n        callback: directionsCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 22\n      }, this) : null, response !== null ? /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        directions: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this) : null, response ? /*#__PURE__*/_jsxDEV(Polyline, {\n        options: optionsPolyline,\n        path: path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 30\n      }, this) : null, coordinates !== '' && response ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: 55.7522200,\n          lng: 37.6155600\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: response.routes[0].legs[0].start_address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 55\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n\n  const x = () => {\n    return isLoaded ? renderMap() : null;\n  };\n\n  setTimeout(x, 1000);\n};\n\n_s(Map, \"DuhYW+knne+Lo0say9sxKoxFjUc=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\nexport default _c2 = /*#__PURE__*/React.memo(Map);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx"],"names":["React","useState","useCallback","useEffect","useRef","paths","GoogleMap","Marker","useLoadScript","DirectionsRenderer","DirectionsService","Polyline","InfoWindow","PolygonMkad","containerStyle","width","height","Map","isLoaded","googleMapsApiKey","myMap","setMyMap","center","setCenter","lat","lng","zoom","setZoom","markers","setMarkers","coordinates","setCoordinates","response","setResponse","travelMode","setTravelMode","origin","setOrigin","destination","setDestination","optionsPolyline","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","visible","onMapClick","event","latLng","toJSON","distance","lat1","lng1","lat2","lng2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","resultCoordinates","resultDistance","map","item","resultSort","slice","sort","a","b","resultIndex","indexOf","path","directionsServiceOptions","directionsCallback","res","status","console","log","renderMap","routes","legs","start_address","x","setTimeout","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {useState, useCallback, useEffect, useRef} from 'react'\n\nimport paths from \"../../mkad\";\n\n\nimport\n    {GoogleMap,\n    Marker,\n    useLoadScript,\n    DirectionsRenderer,\n    DirectionsService,\n    Polyline,\n    InfoWindow}\nfrom '@react-google-maps/api';\n\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\n\n\n\nconst containerStyle = {\n    width: '100wh',\n    height: '100vh'\n}\n\n\nconst  Map = () => {\n\n    const { isLoaded } = useLoadScript({\n        googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\",\n    });\n\n    const [ myMap, setMyMap ] = useState(null);\n    const [center, setCenter] = useState({lat: 55.7522200, lng: 37.6155600});\n    const [zoom,setZoom] = useState(8);\n    const [ markers, setMarkers ] = useState([]);\n    const [coordinates, setCoordinates] = useState('')\n    const [response, setResponse] = useState(null)\n    const [travelMode, setTravelMode] = useState('DRIVING')\n    const [origin, setOrigin] = useState('')\n    const [destination, setDestination] = useState('')\n\n\n    const optionsPolyline = {\n        strokeColor: 'green',\n        strokeOpacity: 1,\n        strokeWeight: 5,\n        fillColor: 'green',\n        fillOpacity: 1,\n        visible: true,\n    }\n\n\n    const onMapClick = useCallback((event) => {\n\n            setCoordinates(event.latLng.toJSON());\n            setOrigin(event.latLng.toJSON())\n\n            }, [])\n\n\n    const  distance =  (lat1, lng1, lat2, lng2) =>  {\n            if ((lat1 === lat2) && (lng1 === lng2)) {\n                return 0;\n            }\n            else {\n                let radlat1 = Math.PI * lat1/180;\n                let radlat2 = Math.PI * lat2/180;\n                let theta = lng1-lng2;\n                let radtheta = Math.PI * theta/180;\n\n\n                let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n                if (dist > 1) {\n                    dist = 1;\n                }\n\n                dist = Math.acos(dist);\n                dist = dist * 180/Math.PI;\n                dist = dist * 60 * 1.1515 *1.609344\n\n                return dist;\n            }\n    }\n\n\n    const resultCoordinates = () => {\n        const resultDistance = paths.map(item =>\n            coordinates ? (distance(coordinates.lat, coordinates.lng, item.lat, item.lng)) : false)\n        const resultSort = resultDistance.slice(0).sort((a, b) => a - b);\n\n        const resultIndex = resultDistance.indexOf(resultSort[0]);\n        return paths[resultIndex]\n\n    }\n\n    useEffect(() => {\n        setDestination(resultCoordinates())\n    })\n\n\n\n\n    const path = [origin,destination]\n\n\n    const directionsServiceOptions = {\n        origin: origin,\n        destination: destination,\n        travelMode: travelMode,\n    }\n\n\n\n    const directionsCallback = useCallback((res) => {\n        if (res !== null)  {\n            if (res.status === 'OK') {\n                setResponse(res)\n            } else {\n                console.log('response: ', res)\n            }\n        }\n    }, [])\n\n\n\n\n\n    const renderMap = () => (\n        <div>\n            <GoogleMap\n                center={center}\n                zoom={zoom}\n                mapContainerStyle={containerStyle}\n                onLoad={map => setMyMap(map)}\n                onClick={onMapClick}\n            >\n                <PolygonMkad/>\n               {markers && coordinates ? (<Marker position={coordinates}/>) : null}\n\n                {(origin !== '' && destination !== '') ?\n                    (<DirectionsService\n                        options={directionsServiceOptions}\n                        callback={directionsCallback}\n                    />) : null\n                }\n\n                {(response !== null) ? (\n                    <DirectionsRenderer directions ={response} />\n                ): null}\n\n                {response ? (<Polyline\n                        options = {optionsPolyline}\n                        path = {path}\n                    />\n                ): null}\n\n                {(coordinates !== ''  && response) ? (<InfoWindow\n                    position = {{lat: 55.7522200, lng: 37.6155600}}\n                    >\n                    <div>{response.routes[0].legs[0].start_address}</div>\n                    </InfoWindow>): null}\n\n            </GoogleMap>\n\n\n        </div>\n)\n\n\n\n    const x = () => {\n        return isLoaded ? renderMap() : null;\n    }\n\n    setTimeout(x,1000)\n\n}\n\n\n\nexport default React.memo(Map)\n\n\n"]},"metadata":{},"sourceType":"module"}