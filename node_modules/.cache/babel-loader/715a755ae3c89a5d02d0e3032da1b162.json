{"ast":null,"code":"var _jsxFileName = \"/Users/jullmi/Documents/development/map/src/Distance.jsx\";\nimport paths from \"./mkad\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Distance = props => {\n  const coordinates = props.coordinates;\n\n  const distance = (lat1, lng1, lat2, lng2) => {\n    if (lat1 === lat2 && lng1 === lng2) {\n      return 0;\n    } else {\n      let radlat1 = Math.PI * lat1 / 180;\n      let radlat2 = Math.PI * lat2 / 180;\n      let theta = lng1 - lng2;\n      let radtheta = Math.PI * theta / 180;\n      let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n      if (dist > 1) {\n        dist = 1;\n      }\n\n      dist = Math.acos(dist);\n      dist = dist * 180 / Math.PI;\n      dist = dist * 60 * 1.1515 * 1.609344;\n      console.log(dist);\n      return dist;\n    }\n  };\n\n  console.log(distance(coordinates.lat, coordinates.lng, paths[0].lat, paths[0].lng)); // let resultDistance =[]\n  // for (let i = 0; i < paths.length; i++) {\n  //     paths.map(distance(coordinates.lat, coordinates.lng, paths[i].lat, paths[i].lng))\n  //     let key = i;\n  //     let va\n  // }\n  //\n  // console.log(resultDistance)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Distance;\nexport default Distance;\n\nvar _c;\n\n$RefreshReg$(_c, \"Distance\");","map":{"version":3,"sources":["/Users/jullmi/Documents/development/map/src/Distance.jsx"],"names":["paths","React","Distance","props","coordinates","distance","lat1","lng1","lat2","lng2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","console","log","lat","lng"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,QAAlB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAExB,QAAMC,WAAW,GAAGD,KAAK,CAACC,WAA1B;;AAEA,QAAOC,QAAQ,GAAI,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,KAA6B;AAC5C,QAAKH,IAAI,KAAKE,IAAV,IAAoBD,IAAI,KAAKE,IAAjC,EAAwC;AACpC,aAAO,CAAP;AACH,KAFD,MAGK;AACD,UAAIC,OAAO,GAAGC,IAAI,CAACC,EAAL,GAAUN,IAAV,GAAe,GAA7B;AACA,UAAIO,OAAO,GAAGF,IAAI,CAACC,EAAL,GAAUJ,IAAV,GAAe,GAA7B;AACA,UAAIM,KAAK,GAAGP,IAAI,GAACE,IAAjB;AACA,UAAIM,QAAQ,GAAGJ,IAAI,CAACC,EAAL,GAAUE,KAAV,GAAgB,GAA/B;AAGA,UAAIE,IAAI,GAAGL,IAAI,CAACM,GAAL,CAASP,OAAT,IAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASR,OAAT,IAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAA3F;;AACA,UAAIC,IAAI,GAAG,CAAX,EAAc;AACVA,QAAAA,IAAI,GAAG,CAAP;AACH;;AACDA,MAAAA,IAAI,GAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP;AACAA,MAAAA,IAAI,GAAGA,IAAI,GAAG,GAAP,GAAWL,IAAI,CAACC,EAAvB;AACAI,MAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY,MAAZ,GAAoB,QAA3B;AAGAI,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEA,aAAOA,IAAP;AAEH;AACJ,GAzBD;;AA2BAI,EAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACD,WAAW,CAACkB,GAAb,EAAkBlB,WAAW,CAACmB,GAA9B,EAAmCvB,KAAK,CAAC,CAAD,CAAL,CAASsB,GAA5C,EAAiDtB,KAAK,CAAC,CAAD,CAAL,CAASuB,GAA1D,CAApB,EA/BwB,CAkCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA/CD;;KAAMrB,Q;AAiDN,eAAeA,QAAf","sourcesContent":["import paths from \"./mkad\";\n\nimport React from 'react'\n\nconst Distance = (props) => {\n\n    const coordinates = props.coordinates\n\n    const  distance =  (lat1, lng1, lat2, lng2) =>  {\n        if ((lat1 === lat2) && (lng1 === lng2)) {\n            return 0;\n        }\n        else {\n            let radlat1 = Math.PI * lat1/180;\n            let radlat2 = Math.PI * lat2/180;\n            let theta = lng1-lng2;\n            let radtheta = Math.PI * theta/180;\n\n\n            let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n            if (dist > 1) {\n                dist = 1;\n            }\n            dist = Math.acos(dist);\n            dist = dist * 180/Math.PI;\n            dist = dist * 60 * 1.1515 *1.609344\n\n\n            console.log(dist)\n\n            return dist;\n\n        }\n    }\n\n    console.log(distance(coordinates.lat, coordinates.lng, paths[0].lat, paths[0].lng))\n\n\n    // let resultDistance =[]\n    // for (let i = 0; i < paths.length; i++) {\n    //     paths.map(distance(coordinates.lat, coordinates.lng, paths[i].lat, paths[i].lng))\n    //     let key = i;\n    //     let va\n    // }\n    //\n    // console.log(resultDistance)\n\n\n    return (\n        <div></div>\n    )\n}\n\nexport default Distance\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}