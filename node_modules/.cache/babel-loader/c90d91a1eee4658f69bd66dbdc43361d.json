{"ast":null,"code":"import paths from \"./mkad\";\nconsole.log(paths);\n\nconst distance = (lat1, lng1, lat2, lng2) => {\n  if (lat1 === lat2 && lng1 === lng2) {\n    return 0;\n  } else {\n    let radlat1 = Math.PI * lat1 / 180;\n    let radlat2 = Math.PI * lat2 / 180;\n    let theta = lng1 - lng2;\n    let radtheta = Math.PI * theta / 180;\n    let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n    if (dist > 1) {\n      dist = 1;\n    }\n\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515 * 1.609344;\n    return dist;\n  }\n};\n\ndistance((paths[0].lat, paths[0].lng, paths[89].lat, paths[89].lng));\nconsole.log(distance());\nexport default distance();","map":{"version":3,"sources":["/Users/jullmi/Documents/development/map/src/distanse.js"],"names":["paths","console","log","distance","lat1","lng1","lat2","lng2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","lat","lng"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,QAAlB;AAEAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AAMA,MAAOG,QAAQ,GAAI,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,KAA6B;AAC5C,MAAKH,IAAI,KAAKE,IAAV,IAAoBD,IAAI,KAAKE,IAAjC,EAAwC;AACpC,WAAO,CAAP;AACH,GAFD,MAGK;AACD,QAAIC,OAAO,GAAGC,IAAI,CAACC,EAAL,GAAUN,IAAV,GAAe,GAA7B;AACA,QAAIO,OAAO,GAAGF,IAAI,CAACC,EAAL,GAAUJ,IAAV,GAAe,GAA7B;AACA,QAAIM,KAAK,GAAGP,IAAI,GAACE,IAAjB;AACA,QAAIM,QAAQ,GAAGJ,IAAI,CAACC,EAAL,GAAUE,KAAV,GAAgB,GAA/B;AAGA,QAAIE,IAAI,GAAGL,IAAI,CAACM,GAAL,CAASP,OAAT,IAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASR,OAAT,IAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAA3F;;AACA,QAAIC,IAAI,GAAG,CAAX,EAAc;AACVA,MAAAA,IAAI,GAAG,CAAP;AACH;;AACDA,IAAAA,IAAI,GAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAAG,GAAP,GAAWL,IAAI,CAACC,EAAvB;AACAI,IAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY,MAAZ,GAAoB,QAA3B;AAEA,WAAOA,IAAP;AACH;AACJ,CArBD;;AAwBAX,QAAQ,EAAEH,KAAK,CAAC,CAAD,CAAL,CAASkB,GAAT,EAAclB,KAAK,CAAC,CAAD,CAAL,CAASmB,GAAvB,EAA4BnB,KAAK,CAAC,EAAD,CAAL,CAAUkB,GAAtC,EAA2ClB,KAAK,CAAC,EAAD,CAAL,CAAUmB,GAAvD,EAAR;AAEAlB,OAAO,CAACC,GAAR,CAAYC,QAAQ,EAApB;AAGA,eAAeA,QAAQ,EAAvB","sourcesContent":["import paths from \"./mkad\";\n\nconsole.log(paths)\n\n\n\n\n\nconst  distance =  (lat1, lng1, lat2, lng2) =>  {\n    if ((lat1 === lat2) && (lng1 === lng2)) {\n        return 0;\n    }\n    else {\n        let radlat1 = Math.PI * lat1/180;\n        let radlat2 = Math.PI * lat2/180;\n        let theta = lng1-lng2;\n        let radtheta = Math.PI * theta/180;\n\n\n        let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n        if (dist > 1) {\n            dist = 1;\n        }\n        dist = Math.acos(dist);\n        dist = dist * 180/Math.PI;\n        dist = dist * 60 * 1.1515 *1.609344\n\n        return dist;\n    }\n}\n\n\ndistance((paths[0].lat, paths[0].lng, paths[89].lat, paths[89].lng))\n\nconsole.log(distance())\n\n\nexport default distance()\n\n"]},"metadata":{},"sourceType":"module"}