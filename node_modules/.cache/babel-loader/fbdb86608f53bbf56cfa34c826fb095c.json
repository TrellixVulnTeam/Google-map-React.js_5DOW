{"ast":null,"code":"var _jsxFileName = \"/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useCallback } from 'react';\nimport './map.scss';\nimport { GoogleMap, Marker, useLoadScript, DirectionsRenderer, DirectionsService } from '@react-google-maps/api';\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  Width: '100wh',\n  height: '100vh'\n};\n\nconst Map = () => {\n  _s();\n\n  const [myMap, setMyMap] = useState(null);\n  const [center, setCenter] = useState({\n    lat: 55.7522200,\n    lng: 37.6155600\n  });\n  const [zoom, setZoom] = useState(10);\n  const [markers, setMarkers] = useState([]);\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\"\n  });\n  const onMapClick = useCallback(event => {\n    coordinates = event.latLng.toJSON();\n    setMarkers(markers => /*#__PURE__*/_jsxDEV(Marker, {\n      position: coordinates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }, this));\n  }, []);\n  let coordinates;\n  const [response, setResponse] = React.useState(null);\n  const [travelMode, setTravelMode] = React.useState('DRIVING');\n  const [origin, setOrigin] = React.useState('');\n  const [destination, setDestination] = React.useState('');\n  const originRef = React.useRef();\n  const destinationRef = React.useRef();\n  const directionsServiceOptions = React.useMemo(() => {\n    return {\n      destination: destination,\n      origin: origin,\n      travelMode: travelMode\n    };\n  }, []);\n  const directionsRendererOptions = React.useMemo(() => {\n    return {\n      directions: response\n    };\n  }, []);\n  const directionsCallback = React.useCallback(res => {\n    console.log(res);\n\n    if (res !== null) {\n      if (res.status === 'OK') {\n        setResponse(res);\n      } else {\n        console.log('response: ', res);\n      }\n    }\n  }, []);\n\n  const renderMap = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: containerStyle,\n      onLoad: map => setMyMap(map),\n      onClick: onMapClick,\n      children: [/*#__PURE__*/_jsxDEV(PolygonMkad, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), markers, destination !== '' && origin !== '' && /*#__PURE__*/_jsxDEV(DirectionsService, {\n        options: directionsServiceOptions,\n        callback: directionsCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), response !== null && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        options: directionsRendererOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n\n  return isLoaded ? renderMap() : null;\n};\n\n_s(Map, \"r8iRsE1pm9YtiNZbA3OoEIh+f3E=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\nexport default _c2 = /*#__PURE__*/React.memo(Map);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx"],"names":["React","useState","useCallback","GoogleMap","Marker","useLoadScript","DirectionsRenderer","DirectionsService","PolygonMkad","containerStyle","Width","height","Map","myMap","setMyMap","center","setCenter","lat","lng","zoom","setZoom","markers","setMarkers","isLoaded","googleMapsApiKey","onMapClick","event","coordinates","latLng","toJSON","response","setResponse","travelMode","setTravelMode","origin","setOrigin","destination","setDestination","originRef","useRef","destinationRef","directionsServiceOptions","useMemo","directionsRendererOptions","directions","directionsCallback","res","console","log","status","renderMap","map","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {useState, useCallback} from 'react'\n\nimport './map.scss'\n\nimport {GoogleMap, Marker, useLoadScript, DirectionsRenderer, DirectionsService} from '@react-google-maps/api';\n\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\n\n\nconst containerStyle = {\n    Width: '100wh',\n    height: '100vh'\n}\n\n\nconst  Map = () => {\n\n    const [ myMap, setMyMap ] = useState(null);\n    const [center, setCenter] = useState({lat: 55.7522200, lng: 37.6155600});\n    const [zoom,setZoom] = useState(10);\n    const [ markers, setMarkers ] = useState([]);\n\n\n\n    const { isLoaded } = useLoadScript({\n        googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\",\n    });\n\n    const onMapClick = useCallback((event) => {\n            coordinates = event.latLng.toJSON();\n            setMarkers(markers => (\n                    <Marker position={coordinates}/>\n                )\n            )\n    }, [])\n\n    let coordinates\n\n\n    const [response, setResponse] = React.useState(null)\n    const [travelMode, setTravelMode] = React.useState('DRIVING')\n    const [origin, setOrigin] = React.useState('')\n    const [destination, setDestination] = React.useState('')\n    const originRef = React.useRef()\n    const destinationRef = React.useRef()\n\n    const directionsServiceOptions = React.useMemo(() => {\n        return {\n            destination: destination,\n            origin: origin,\n            travelMode: travelMode,\n        }\n    }, [])\n\n    const directionsRendererOptions = React.useMemo(() => {\n        return {\n            directions: response,\n        }\n    }, [])\n\n\n    const directionsCallback = React.useCallback((res) => {\n        console.log(res)\n\n        if (res !== null) {\n            if (res.status === 'OK') {\n                setResponse(res)\n            } else {\n                console.log('response: ', res)\n            }\n        }\n    }, [])\n\n\n\n\n\n\n    const renderMap = () => (\n        <div>\n            <GoogleMap\n                center={center}\n                zoom={zoom}\n                mapContainerStyle={containerStyle}\n                onLoad={map => setMyMap(map)}\n                onClick={onMapClick}\n            >\n                <PolygonMkad/>\n               {markers}\n              {/*//будет рендер*/}\n                {destination !== '' && origin !== '' && (\n                    <DirectionsService\n                        options={directionsServiceOptions}\n                        callback={directionsCallback}\n                    />\n                )}\n\n                {response !== null && (\n                    <DirectionsRenderer options={directionsRendererOptions} />\n                )}\n            </GoogleMap>\n        </div>\n)\n\n    return isLoaded ? renderMap() : null;\n\n}\n\n\n\nexport default React.memo(Map)\n\n\n"]},"metadata":{},"sourceType":"module"}