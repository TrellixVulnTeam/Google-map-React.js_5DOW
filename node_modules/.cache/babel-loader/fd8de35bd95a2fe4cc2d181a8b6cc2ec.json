{"ast":null,"code":"var _jsxFileName = \"/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useCallback } from 'react';\nimport './map.scss';\nimport { GoogleMap, Marker, useLoadScript, DirectionsRenderer, DirectionsService, Polyline, InfoWindow } from '@react-google-maps/api';\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  Width: '100wh',\n  height: '100vh'\n};\nconst infoWindowStyle = {\n  background: `white`,\n  border: `1px solid ##CCC`,\n  padding: 15\n};\n\nconst Map = () => {\n  _s();\n\n  const [myMap, setMyMap] = useState(null);\n  const [center, setCenter] = useState({\n    lat: 55.7522200,\n    lng: 37.6155600\n  });\n  const [zoom, setZoom] = useState(10);\n  const [markers, setMarkers] = useState([]);\n  const [coordinates, setCoordinates] = useState(null);\n  const [response, setResponse] = useState(null);\n  const [travelMode, setTravelMode] = useState('DRIVING');\n  const [origin, setOrigin] = useState('');\n  const [destination, setDestination] = useState('');\n  const [polyline, setPolyline] = useState([]);\n  const optionsPolyline = {\n    strokeColor: 'green',\n    strokeOpacity: 1,\n    strokeWeight: 5,\n    fillColor: 'green',\n    fillOpacity: 1,\n    visible: true\n  };\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\"\n  });\n  const onMapClick = useCallback(event => {\n    setCoordinates(coordinates => event.latLng.toJSON());\n    setMarkers(markers);\n\n    if (origin !== '') {\n      setOrigin(origin => event.latLng.toJSON());\n    }\n\n    if (destination !== '') {\n      setDestination(destination);\n    }\n\n    setPolyline(polyline);\n  }, []);\n  const directionsServiceOptions = {\n    origin: coordinates,\n    destination: center,\n    travelMode: travelMode\n  };\n  const directionsCallback = useCallback(res => {\n    // console.log(res)\n    // console.log(res.routes[0].legs[0].end_address)\n    if (res !== null) {\n      if (res.status === 'OK') {\n        setResponse(res);\n      } else {\n        console.log('response: ', res);\n      }\n    }\n  }, []);\n  const path = [coordinates, center];\n\n  const renderMap = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      center: center,\n      zoom: zoom,\n      mapContainerStyle: containerStyle,\n      onLoad: map => setMyMap(map),\n      onClick: onMapClick,\n      children: [/*#__PURE__*/_jsxDEV(PolygonMkad, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), markers ? /*#__PURE__*/_jsxDEV(Marker, {\n        position: coordinates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 28\n      }, this) : null, /*#__PURE__*/_jsxDEV(DirectionsService, {\n        options: directionsServiceOptions,\n        callback: directionsCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), response !== '' ? /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n        directions: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this) : null, response ? /*#__PURE__*/_jsxDEV(Polyline, {\n        options: optionsPolyline,\n        path: path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 35\n      }, this) : null, /*#__PURE__*/_jsxDEV(InfoWindow, {\n        children: [\"position = \", [{\n          lat: 55.7522200,\n          lng: 37.6155600\n        }], /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"\\u0422\\u0443\\u0442 \\u0431\\u0443\\u0434\\u0435\\u0442 \\u0430\\u0434\\u0440\\u0435\\u0441\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n\n  return isLoaded ? renderMap() : null;\n};\n\n_s(Map, \"w4IOjQGCUnL/A80MeOhInx+gdk8=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Map;\nexport default _c2 = /*#__PURE__*/React.memo(Map);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/jullmi/Documents/development/map/src/components/Map/Map.jsx"],"names":["React","useState","useCallback","GoogleMap","Marker","useLoadScript","DirectionsRenderer","DirectionsService","Polyline","InfoWindow","PolygonMkad","containerStyle","Width","height","infoWindowStyle","background","border","padding","Map","myMap","setMyMap","center","setCenter","lat","lng","zoom","setZoom","markers","setMarkers","coordinates","setCoordinates","response","setResponse","travelMode","setTravelMode","origin","setOrigin","destination","setDestination","polyline","setPolyline","optionsPolyline","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","visible","isLoaded","googleMapsApiKey","onMapClick","event","latLng","toJSON","directionsServiceOptions","directionsCallback","res","status","console","log","path","renderMap","map","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {useState, useCallback} from 'react'\n\nimport './map.scss'\n\nimport\n    {GoogleMap,\n    Marker,\n    useLoadScript,\n    DirectionsRenderer,\n    DirectionsService,\n    Polyline,\n    InfoWindow}\nfrom '@react-google-maps/api';\n\nimport PolygonMkad from \"../PolygonMkad/Polygon\";\n\n\nconst containerStyle = {\n    Width: '100wh',\n    height: '100vh'\n}\n\n\nconst infoWindowStyle = {\n    background: `white`,\n    border: `1px solid ##CCC`,\n    padding: 15,\n}\n\nconst  Map = () => {\n\n    const [ myMap, setMyMap ] = useState(null);\n    const [center, setCenter] = useState({lat: 55.7522200, lng: 37.6155600});\n    const [zoom,setZoom] = useState(10);\n    const [ markers, setMarkers ] = useState([]);\n    const [coordinates, setCoordinates] = useState(null)\n    const [response, setResponse] = useState(null)\n    const [travelMode, setTravelMode] = useState('DRIVING')\n    const [origin, setOrigin] = useState('')\n    const [destination, setDestination] = useState('')\n    const [polyline, setPolyline] = useState([])\n\n    const optionsPolyline = {\n        strokeColor: 'green',\n        strokeOpacity: 1,\n        strokeWeight: 5,\n        fillColor: 'green',\n        fillOpacity: 1,\n        visible: true,\n    }\n\n\n\n\n    const { isLoaded } = useLoadScript({\n        googleMapsApiKey: \"AIzaSyBYEey3dAT7X6YcANl4oNHBa5V-4KS2cGA\",\n    });\n\n    const onMapClick = useCallback((event) => {\n            setCoordinates(coordinates => event.latLng.toJSON());\n            setMarkers(markers);\n\n            if (origin !== '' ) {\n                setOrigin(origin => event.latLng.toJSON())\n            }\n\n            if (destination !== '') {\n                setDestination(destination)\n            }\n\n            setPolyline(polyline)\n\n    }, [])\n\n\n\n    const directionsServiceOptions = {\n            origin: coordinates,\n            destination: center,\n            travelMode: travelMode\n        }\n\n\n    const directionsCallback = useCallback((res) => {\n        // console.log(res)\n        // console.log(res.routes[0].legs[0].end_address)\n        if (res !== null) {\n            if (res.status === 'OK') {\n                setResponse(res)\n            } else {\n                console.log('response: ', res)\n            }\n        }\n    }, [])\n\n    const path = [coordinates,center]\n\n    const renderMap = () => (\n        <div>\n            <GoogleMap\n                center={center}\n                zoom={zoom}\n                mapContainerStyle={containerStyle}\n                onLoad={map => setMyMap(map)}\n                onClick={onMapClick}\n            >\n                <PolygonMkad/>\n               {markers ? (<Marker position={coordinates}/>) : null}\n                    <DirectionsService\n                        options={directionsServiceOptions}\n                        callback={directionsCallback}\n                    />\n                {(response !== '') ? (\n                    <DirectionsRenderer directions ={response} />\n                ): null}\n\n                {response ? (     <Polyline\n                        options = {optionsPolyline}\n                        path = {path}\n                    />\n                ): null}\n\n                <InfoWindow>\n                    position = {[{lat: 55.7522200, lng: 37.6155600}]}\n                    <div>Тут будет адрес</div>\n                </InfoWindow>\n\n            </GoogleMap>\n        </div>\n)\n\n    return isLoaded ? renderMap() : null;\n\n}\n\n\n\nexport default React.memo(Map)\n\n\n"]},"metadata":{},"sourceType":"module"}